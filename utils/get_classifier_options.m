function options = get_classifier_options(rp)
    arity = rp.arity;
    L = LinearKernel();
    G = GaussKernel();
    pval = true;
    thresholds = 0:1e-4:1;
    thresholds_mi = 0:1e-4:log2(arity);
    full_options = {struct('classifier', @kci_classifier, 'pval', pval, 'discretize', false,...
    'prealloc', @kci_prealloc, 'kernel', L,'thresholds', thresholds, ...
    'color', 'g-', 'normalize', true, 'name', 'partial corr, cts data'), ...
    
    struct('classifier', @kci_classifier, 'pval', pval, 'discretize', false, ...
    'prealloc', @kci_prealloc, 'kernel', G, 'thresholds', thresholds, ...
    'color', 'b-', 'normalize', true, 'name', 'KCI gauss kernel, cts data'), ...
    
    struct('classifier', @kci_classifier, 'pval', pval, 'discretize',true, ...
    'prealloc', @kci_prealloc, 'kernel', L,'thresholds', thresholds, ...
    'color', 'g--', 'normalize', true, 'name', sprintf('partial corr, arity=%d',arity)), ...
    
    struct('classifier', @kci_classifier, 'pval', pval, 'discretize', true, ...
    'prealloc', @kci_prealloc, 'kernel', G, 'thresholds', thresholds, ...
    'color', 'b--','normalize', true, 'name',sprintf('KCI gauss kernel, arity=%d',arity)), ...
    
    struct('classifier', @cc_classifier, 'discretize', true, ...
     'prealloc', @dummy_prealloc, 'thresholds', thresholds, ...
    'color', 'r:', 'normalize', false, 'name', sprintf('cond corr, arity=%d',arity)), ...
    
    struct('classifier', @mi_classifier, 'discretize', true, ...
    'prealloc', @dummy_prealloc, 'thresholds', thresholds_mi, ...
    'color', 'm-.', 'normalize', false, 'name', sprintf('cond MI, arity=%d',arity))};

    if isfield(rp, 'f_sel')
        options = full_options(rp.f_sel);
    else
        options = full_options;
    end
    
end